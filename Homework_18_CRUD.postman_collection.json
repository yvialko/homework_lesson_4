{
	"info": {
		"_postman_id": "6b1ebbb1-d254-49dc-94d4-b7130a2302ea",
		"name": "Homework_18_CRUD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17332328"
	},
	"item": [
		{
			"name": "CRUD Login Logout- Happy Path Copy",
			"item": [
				{
					"name": "Sign-up user (created).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate a random email:",
									"",
									"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz') {",
									"    if (!minValue) {",
									"        minValue = 6;",
									"        maxValue = 6;",
									"    }",
									"    if (!maxValue) {",
									"        maxValue = minValue;",
									"    }",
									"    let length = Math.floor(Math.random() * (maxValue - minValue + 1)) + minValue;",
									"    let result = \"\";",
									"    for (let i = 0; i < length; i++)",
									"        result += dataSet.charAt(Math.floor(Math.random() * dataSet.length));",
									"    return result;",
									"}",
									"const myRandomString = randomString(6, 10);",
									"",
									"//console.log('Generated string:', myRandomString);",
									"",
									"pm.variables.set('randomString', myRandomString);",
									"",
									"pm.collectionVariables.set(\"email\", myRandomString + \"@test.com\");",
									"",
									"//Generate a random password (8-15):",
									"",
									"function randomPassword(length) {",
									"    const setUpperCase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
									"    const setLowerCase = 'abcdefghijklmnopqrstuvwxyz';",
									"    const setNumbers = '0123456789';",
									"    const allSets = setUpperCase + setLowerCase + setNumbers;",
									"    let password = '';",
									"",
									"    //It is guaranteed to add at least one character of each type (O_o)",
									"    password += setUpperCase.charAt(Math.floor(Math.random() * setUpperCase.length));",
									"    password += setLowerCase.charAt(Math.floor(Math.random() * setLowerCase.length));",
									"    password += setNumbers.charAt(Math.floor(Math.random() * setNumbers.length));",
									"",
									"    for (let i = password.length; i < length; i++) {",
									"        const randomIndex = Math.floor(Math.random() * allSets.length);",
									"        password += allSets.charAt(randomIndex);",
									"    }",
									"",
									"    // Mix-Mix )",
									"    password = password.split('').sort(() => Math.random() - 0.5).join('');",
									"",
									"    return password;",
									"}",
									"",
									"const passwordLength = Math.floor(Math.random() * (15 - 8 + 1)) + 8;",
									"let userPassword = randomPassword(passwordLength);",
									"",
									"pm.collectionVariables.set('userPassword', userPassword);",
									"console.log('User password:', userPassword);",
									"",
									"//Create random first and last name:",
									" pm.collectionVariables.set(\"firstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\".replace(/\\\\?'/g, \"\")))",
									"",
									"  pm.collectionVariables.set(\"lastName\", pm.variables.replaceIn(\"{{$randomLastName}}\".replace(/\\\\?'/g, \"\")))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"console.log('email' + '=' + pm.collectionVariables.get(\"email\"));",
									"",
									"// pm.collectionVariables.set(\"name\", JSON.parse(pm.request.body.raw).name);",
									"",
									"// console.log('name' + '=' + pm.collectionVariables.get(\"name\"));",
									"",
									"// pm.collectionVariables.set(\"lastName\", JSON.parse(pm.request.body.raw).lastName);",
									"",
									"// console.log('lastName' + '=' + pm.collectionVariables.get(\"lastName\"));",
									"",
									"//Save the value from the response to a variable",
									"const response = pm.response.json();",
									"",
									"if (response.status === \"ok\" && response.data) {",
									"    const data = response.data;",
									"",
									"    pm.collectionVariables.set(\"userId\", data.userId);",
									"    pm.collectionVariables.set(\"photoFilename\", data.photoFilename);",
									"    pm.collectionVariables.set(\"distanceUnits\", data.distanceUnits);",
									"    pm.collectionVariables.set(\"currency\", data.currency);",
									"",
									"    console.log(\"Variables saved to the collection:\", data);",
									"} else {",
									"    console.warn(\"Oops.... No valid data object in response\");",
									"}",
									"//Tests:",
									"// Check status code.",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"//Verified First Name.",
									"pm.test(\"The first name does not contain apostrophes\", function() {",
									"    const firstName = pm.variables.get(\"firstName\");",
									"    pm.expect(firstName).to.not.include(\"'\");",
									"});",
									"//Verified Last Name.",
									"pm.test(\"The last name does not contain apostrophes\", function() {",
									"    const lastName = pm.variables.get(\"lastName\");",
									"    pm.expect(lastName).to.not.include(\"'\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", () => {",
									"    pm.expect(pm.request.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"//Check cookies:",
									"pm.test(\"Cookie 'sid' is present\", () => {",
									"    pm.expect(pm.cookies.has('sid')).to.be.true;",
									"});",
									"",
									"// pm.test(\"Verified the domain\", () => {",
									"//     const setCookieHeaders = pm.response.headers.values('Set-Cookie');",
									"//     const sidCookieHeader = setCookieHeaders.find(header => header.startsWith('sid='));",
									"//     pm.expect(sidCookieHeader).to.include('Domain=.forstudy.space');",
									"// });",
									"",
									"pm.test(\"Saving the 'sid' cookie value to a collection variable\", () => {",
									"    var sidHeader = pm.response.headers.get('Set-Cookie');",
									"",
									"    if (sidHeader) {",
									"        // Використовуємо регулярний вираз для вилучення значення 'sid'",
									"        var sidMatch = sidHeader.match(/sid=([^;]+)/);",
									"",
									"        if (sidMatch && sidMatch[1]) {",
									"            const sidValue = sidMatch[1];",
									"            pm.collectionVariables.set('sid_token', sidValue);",
									"            console.log(\"Значення cookie 'sid' збережено як змінна колекції 'sid_token':\", sidValue);",
									"        } else {",
									"            pm.expect.fail(\"Cookie 'sid' не знайдено в заголовку Set-Cookie\");",
									"        }",
									"    } else {",
									"        pm.expect.fail(\"Заголовок Set-Cookie не знайдено у відповіді\");",
									"    }",
									"});",
									"",
									"// pm.collectionVariables.set(\"test\", pm.response.headers.get('Set-Cookie'))",
									"",
									"//---------------",
									"",
									"const jsonData = pm.response.json();",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"status\": { \"type\": \"string\" },",
									"        \"data\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"userId\": { \"type\": \"integer\" },",
									"                \"photoFilename\": { \"type\": \"string\" },",
									"                \"distanceUnits\": { \"type\": \"string\" },",
									"                \"currency\": { \"type\": \"string\" }",
									"            },",
									"            \"required\": [\"userId\", \"photoFilename\", \"distanceUnits\", \"currency\"]",
									"        }",
									"    },",
									"    \"required\": [\"status\", \"data\"]",
									"};",
									"",
									"pm.test(\"JSON schema\", function () {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"    if (!tv4.validate(jsonData, schema)) {",
									"        console.log(\"Validation errors:\", tv4.error);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{userPassword}}\",\n    \"repeatPassword\": \"{{userPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env}}/auth/signup",
							"host": [
								"{{env}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user's profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Create random first and last name:",
									" pm.collectionVariables.set(\"newFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\".replace(/\\\\?'/g, \"\")))",
									"",
									"  pm.collectionVariables.set(\"newLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\".replace(/\\\\?'/g, \"\")))",
									"",
									"//Create new date:",
									"let currentDateISO = new Date().toISOString();",
									"let currentDate = new Date(currentDateISO);",
									"currentDate.setFullYear(currentDate.getFullYear() - 35);",
									"let newDateBirth = currentDate.toISOString();",
									"",
									"pm.collectionVariables.set('newDateBirth', newDateBirth);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Save the value from the response to a variable",
									"const response = pm.response.json();",
									"",
									"if (response.status === \"ok\" && response.data) {",
									"    const data = response.data;",
									"",
									"    pm.collectionVariables.set(\"newPhotoFilename\", data.photoFilename);",
									"    pm.collectionVariables.set(\"country\", data.country);",
									"    pm.collectionVariables.set(\"currentDateBirth\", data.dateBirth);",
									"",
									"    console.log(\"Variables saved to the collection:\", data);",
									"} else {",
									"    console.warn(\"Oops.... No valid data object in response\");",
									"}",
									"",
									"//Tests:",
									"// Check status code.",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Verified First Name.",
									"pm.test(\"The first name does not contain apostrophes\", function() {",
									"    const firstName = pm.variables.get(\"newFirstName\");",
									"    pm.expect(firstName).to.not.include(\"'\");",
									"});",
									"//Verified Last Name.",
									"pm.test(\"The last name does not contain apostrophes\", function() {",
									"    const lastName = pm.variables.get(\"newLastName\");",
									"    pm.expect(lastName).to.not.include(\"'\");",
									"});",
									"//Check cookies:",
									"pm.test(\"Cookie 'sid' is present\", () => {",
									"    pm.expect(pm.cookies.has('sid')).to.be.true;",
									"});",
									"",
									"pm.test(\"Saving the 'sid' cookie value to a collection variable\", () => {",
									"    var sidHeader = pm.request.headers.get('Cookie');",
									"",
									"    if (sidHeader) {",
									"        // Використовуємо регулярний вираз для вилучення значення 'sid'",
									"        const sidMatch = sidHeader.match(/sid=([^;]+)/);",
									"",
									"        if (sidMatch && sidMatch[1]) {",
									"            const sidValue = sidMatch[1];",
									"            pm.collectionVariables.set('sid_token_2', sidValue);",
									"            console.log(\"Значення cookie 'sid' в заголовках запиту:\", sidValue);",
									"        } else {",
									"            pm.expect.fail(\"Cookie 'sid' не знайдено в заголовку Cookie запиту.\");",
									"        }",
									"    } else {",
									"        pm.expect.fail(\"Заголовок Cookie відсутній у запиті.\");",
									"    }",
									"",
									"});",
									"",
									"pm.test(\"Compare sid value\", () => {",
									"    pm.expect(pm.collectionVariables.get('sid_token')).to.eql(pm.collectionVariables.get('sid_token_2'))",
									"});",
									"",
									"pm.test(\"Compare userId value\", () => {",
									"    pm.expect(pm.collectionVariables.get('userId')).to.eql(pm.response.json().data.userId)",
									"});",
									"",
									"pm.test(\"Check that the date is in ISO 8601 format\", () => {",
									"    var dateString = pm.response.json().data.dateBirth;",
									"    var iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;",
									"",
									"    pm.expect(dateString).to.match(iso8601Regex);",
									"});",
									"",
									"pm.test(\"Compare the old and new name. The names are different.\", () => {",
									"    pm.expect(pm.collectionVariables.get('newFirstName')).to.not.eql(pm.collectionVariables.get('firstName'))",
									"});",
									"",
									"pm.test(\"Compare the old and new surname. The surname are different.\", () => {",
									"    pm.expect(pm.collectionVariables.get('newLastName')).to.not.eql(pm.collectionVariables.get('lastName'))",
									"});",
									"",
									"pm.collectionVariables.unset('firstName');",
									"pm.collectionVariables.unset('lastName');",
									"pm.collectionVariables.unset('photoFilename');",
									"pm.collectionVariables.unset('newDateBirth');",
									"pm.collectionVariables.unset('sid_token_2');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"photo\": \"user-{{$randomInt}}.png\",\n  \"name\": \"{{newFirstName}}\",\n  \"lastName\": \"{{newLastName}}\",\n  \"dateBirth\": \"{{newDateBirth}}\",\n  \"country\": \"{{$randomCountry}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env}}/users/profile",
							"host": [
								"{{env}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gets authenticated user profile data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Tests:",
									"const responseJson = pm.response.json();",
									"// Check status code.",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check cookies:",
									"pm.test(\"Cookie 'sid' is present\", () => {",
									"    pm.expect(pm.cookies.has('sid')).to.be.true;",
									"});",
									"",
									"pm.test(\"Saving the 'sid' cookie value to a collection variable\", () => {",
									"    var sidHeader = pm.request.headers.get('Cookie');",
									"",
									"    if (sidHeader) {",
									"        // Використовуємо регулярний вираз для вилучення значення 'sid'",
									"        const sidMatch = sidHeader.match(/sid=([^;]+)/);",
									"",
									"        if (sidMatch && sidMatch[1]) {",
									"            const sidValue = sidMatch[1];",
									"            pm.collectionVariables.set('sid_token_3', sidValue);",
									"            console.log(\"Значення cookie 'sid' в заголовках запиту:\", sidValue);",
									"        } else {",
									"            pm.expect.fail(\"Cookie 'sid' не знайдено в заголовку Cookie запиту.\");",
									"        }",
									"    } else {",
									"        pm.expect.fail(\"Заголовок Cookie відсутній у запиті.\");",
									"    }",
									"",
									"});",
									"",
									"pm.test(\"Compare sid value\", () => {",
									"    pm.expect(pm.collectionVariables.get('sid_token')).to.eql(pm.collectionVariables.get('sid_token_3'))",
									"});",
									"",
									"pm.test(\"Compare userId value\", () => {",
									"    pm.expect(pm.collectionVariables.get('userId')).to.eql(pm.response.json().data.userId)",
									"});",
									"",
									"pm.test(\"Compare name\", () => {",
									"    pm.expect(pm.collectionVariables.get('newFirstName')).to.eql(pm.response.json().data.name)",
									"});",
									"",
									"pm.test(\"Compare surname\", () => {",
									"    pm.expect(pm.collectionVariables.get('newLastName')).to.eql(pm.response.json().data.lastName)",
									"});",
									"",
									"pm.test(\"Compare birth date\", () => {",
									"    pm.expect(pm.collectionVariables.get('currentDateBirth')).to.eql(pm.response.json().data.dateBirth)",
									"});",
									"",
									"pm.test(\"Compare country\", () => {",
									"    pm.expect(pm.collectionVariables.get('country')).to.eql(pm.response.json().data.country)",
									"});",
									"",
									"pm.test(\"Checking for the presence of the 'status' field\", () => {",
									"    pm.expect(responseJson).to.have.property(\"status\");",
									"});",
									"",
									"pm.test(\"Checking that the 'status' field is a string\", () => {",
									"    pm.expect(responseJson.status).to.be.a(\"string\");",
									"});",
									"",
									"pm.collectionVariables.unset('sid_token_3');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{env}}/users/profile",
							"host": [
								"{{env}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Chenges user's password Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate a random password (8-15):",
									"",
									"function randomPassword(length) {",
									"    const setUpperCase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
									"    const setLowerCase = 'abcdefghijklmnopqrstuvwxyz';",
									"    const setNumbers = '0123456789';",
									"    const allSets = setUpperCase + setLowerCase + setNumbers;",
									"    let password = '';",
									"",
									"    //It is guaranteed to add at least one character of each type (O_o)",
									"    password += setUpperCase.charAt(Math.floor(Math.random() * setUpperCase.length));",
									"    password += setLowerCase.charAt(Math.floor(Math.random() * setLowerCase.length));",
									"    password += setNumbers.charAt(Math.floor(Math.random() * setNumbers.length));",
									"",
									"    for (let i = password.length; i < length; i++) {",
									"        const randomIndex = Math.floor(Math.random() * allSets.length);",
									"        password += allSets.charAt(randomIndex);",
									"    }",
									"",
									"    // Mix-Mix )",
									"    password = password.split('').sort(() => Math.random() - 0.5).join('');",
									"",
									"    return password;",
									"}",
									"",
									"const passwordLength = Math.floor(Math.random() * (15 - 8 + 1)) + 8;",
									"let userPasswordNew = randomPassword(passwordLength);",
									"",
									"pm.variables.set('userPasswordNew', userPasswordNew);",
									"console.log('User password:', userPasswordNew);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Tests:",
									"const responseJson = pm.response.json();",
									"// Check status code.",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check cookies:",
									"pm.test(\"Cookie 'sid' is present\", () => {",
									"    pm.expect(pm.cookies.has('sid')).to.be.true;",
									"});",
									"",
									"pm.test(\"Saving the 'sid' cookie value to a collection variable\", () => {",
									"    var sidHeader = pm.request.headers.get('Cookie');",
									"",
									"    if (sidHeader) {",
									"        // Використовуємо регулярний вираз для вилучення значення 'sid'",
									"        const sidMatch = sidHeader.match(/sid=([^;]+)/);",
									"",
									"        if (sidMatch && sidMatch[1]) {",
									"            const sidValue = sidMatch[1];",
									"            pm.collectionVariables.set('sid_token_4', sidValue);",
									"            console.log(\"Значення cookie 'sid' в заголовках запиту:\", sidValue);",
									"        } else {",
									"            pm.expect.fail(\"Cookie 'sid' не знайдено в заголовку Cookie запиту.\");",
									"        }",
									"    } else {",
									"        pm.expect.fail(\"Заголовок Cookie відсутній у запиті.\");",
									"    }",
									"",
									"});",
									"",
									"pm.test(\"Compare sid value\", () => {",
									"    pm.expect(pm.collectionVariables.get('sid_token')).to.eql(pm.collectionVariables.get('sid_token_4'))",
									"});",
									"",
									"pm.collectionVariables.unset('sid_token_4');",
									"",
									"pm.test(\"Compare userId value\", () => {",
									"    pm.expect(pm.collectionVariables.get('userId')).to.eql(pm.response.json().data.userId)",
									"});",
									"",
									"// pm.test(\"Compare new and old password\", () => {",
									"//     pm.expect(pm.collectionVariables.get('userPassword')).to.eql(pm.collectionVariables.get('userPasswordNew'))",
									"// });",
									"",
									"pm.collectionVariables.unset('userPasswordNew');",
									"",
									"pm.collectionVariables.set(\"userPassword\", JSON.parse(pm.request.body.raw).password);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oldPassword\": \"{{userPassword}}\",\n  \"password\": \"{{userPasswordNew}}\",\n  \"repeatPassword\": \"{{userPasswordNew}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env}}/users/password",
							"host": [
								"{{env}}"
							],
							"path": [
								"users",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "LOGOUT - Ends up user session. Clears session cookies Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Tests:",
									"const responseJson = pm.response.json();",
									"// Check status code.",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking for the presence of the 'status' field\", () => {",
									"    pm.expect(responseJson).to.have.property(\"status\");",
									"});",
									"",
									"pm.test(\"Checking that the 'status' field is a string\", () => {",
									"    pm.expect(responseJson.status).to.be.a(\"string\");",
									"});",
									"",
									"pm.collectionVariables.unset('sid_token');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{env}}/auth/logout",
							"host": [
								"{{env}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign-in user Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Tests:",
									"const responseJson = pm.response.json();",
									"// Check status code.",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking for the presence of the 'status' field\", () => {",
									"    pm.expect(responseJson).to.have.property(\"status\");",
									"});",
									"",
									"pm.test(\"Checking that the 'status' field is a string\", () => {",
									"    pm.expect(responseJson.status).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Compare userId value\", () => {",
									"    pm.expect(pm.collectionVariables.get('userId')).to.eql(pm.response.json().data.userId)",
									"});",
									"",
									"pm.test(\"Compare userId value\", () => {",
									"    pm.expect(pm.collectionVariables.get('distanceUnits')).to.eql(pm.response.json().data.distanceUnits)",
									"});",
									"",
									"pm.test(\"Compare userId value\", () => {",
									"    pm.expect(pm.collectionVariables.get('currency')).to.eql(pm.response.json().data.currency)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{userPassword}}\",\n  \"remember\": {{$randomBoolean}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env}}/auth/signin",
							"host": [
								"{{env}}"
							],
							"path": [
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletes user's account and current user session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.unset('email');",
									"pm.collectionVariables.unset('userPassword');",
									"pm.collectionVariables.unset('userId');",
									"pm.collectionVariables.unset('distanceUnits');",
									"pm.collectionVariables.unset('currency');",
									"pm.collectionVariables.unset('newFirstName');",
									"pm.collectionVariables.unset('newLastName');",
									"pm.collectionVariables.unset('newPhotoFilename');",
									"pm.collectionVariables.unset('country');",
									"pm.collectionVariables.unset('currentDateBirth');",
									"pm.collectionVariables.unset('sid_token');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{env}}/users",
							"host": [
								"{{env}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}