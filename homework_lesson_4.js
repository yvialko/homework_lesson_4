var example_1 = 'number' + 3 + 3;
console.log("example_1: " + example_1);
// Результат: 'number33'
// Пояснення: оскільки один з опепандів є стрінгою, то оператор + буде виконувати конкантенацію значень
// 'number' + 3 --> string + number --> string + string = 'number3'
// 'number3' + 3 --> string + number --> string + string = 'number33'
// якщо б приклад виглядав так 3 + 3 + 'number' - то спочатку сумалися числа а потім цю суму "прикле]ли" до стрінги
// --> 6number

var example_2 = null + 3;
console.log("example_2: " + example_2);
// Результат: 3
// Пояснення: null --> 0, а вже потім сумуємо ці два числа --> 0 + 3 = 3

var example_3 = 5 && "qwerty";
console.log("example_3: " + example_3);
// Результат: "qwerty"
// Пояснення: 5 - це дійсне значення, "qwerty" - це також дійсне значення
// Оскільки ми використовуємо для порівняння && = ii, то берем останнє значення з прикладу(рядка)

var example_4 = +'40' + +'2' + "hillel";
console.log("example_4: " + example_4);
// Результат: "42hillel"
// Пояснення: +'40' --> перетворив стрінгове значення "40" в число
// +'2' -->  те саме
// далі виконуємо додавання двох чисел що в результаті має 40 + 2 = 42
// 42 ми не можемо звести до стрінги, а hillel - до число, тому конкантенуємо ці два значення

var example_5 = '10' - 5 === 6;
console.log("example_5: " + example_5);
// Результат: false
// Пояснення: Спочатку виконуємо віднімання адже оператор ма вищий пріорітет
// '10' - 5 --> зводимо 10 до числа і виконуємо мат.дію --> 5
// 5 === 6: тут використане абсолютне порівнянн і відповідно 5 не дорівнює 6

var example_6 = true + false;
console.log("example_6: " + example_6);
// Результат: 1
// Пояснення: оскільки неможливо додати булеві значення вони будуть зведені до чисел
// true = 1; false = 0
// відповідно 1 + 0 = 1

var example_7 = '4px' - 3;
console.log("example_7: " + example_7);
// Результат: NaN
// Пояснення: Ми не змогли привести значення до одного типу тому NaN

var example_8 = '4' - 3;
console.log("example_8: " + example_8);
// Результат: 1
// Пояснення: зводимо два значення до одного типу, в нащому випадку до number
// виконується  мат.дія віднімання

var example_9 = '6' + 3 ** 0;
console.log("example_9: " + example_9);
// Результат: 61
// Пояснення: оператор зведеня до ступеня маж вищий пріорітет чим додавання
// тому спочатку зводимо 3 в нульову ступінь = 1
// оскільки один з операндів є стрінгою то оператор + тут виконує конкатенацію значеню

var example_10 = 12 / '6';
console.log("example_10: " + example_10);
// Результат: 2
// Пояснення: зводим операнди до одного типу - number
// та виконуєм мат.дію

var example_11 = '10' + (5 === 6);
console.log("example_11: " + example_11);
// Результат: 10false
// Пояснення: діє в дужкає має найвищий пріорітет, тому порівнюємо два значення
// використаний оператор абсолютного порівняння --> false
// '10' - стрінга; false - boolean як стане стрінгою також 
// оператор + виконує конкантенацію значень 

var example_12 = null == '';
console.log("example_12: " + example_12);
// Результат: false
// Пояснення: == є оператором не строгого порівняння тому намагаємося привести значення до одного типу
// null - відсутність будь якого значення
// '' - це пуста стрінга
// відсутність значення не дорівнює пустому значенню, тобто не куплені яблука це не те саме що з"їдені яблука

var example_13 = 3 ** (9 / 3);
console.log("example_13: " + example_13);
// Результат: 27
// Пояснення: діє в дужкаїх має вищий пріорітет --> 9/3 = 3
// Отже возводимо 3 в 3 ступінь

var example_14 = !!'false' == !!'true';
console.log("example_14: " + example_14);
// Результат: true
// Пояснення: 'false' - істинне значення тому що не пусте 
// 'true' - істинне значення тому що не пусте 
// ! - оператор перетворення булевих значень (міняє на протежежні) тому виходить, що !'false' = !true = false
// !!'false' = !(!'false') = !(!true) = !false = true
// !!'true' = !(!'true') = !(!true) = !false = true
// == не строге порівняння true == true --> true

var example_15 = 0 || '0' && 1;
console.log("example_15: " + example_15);
// Результат: 1
// Пояснення: 0 - це хибне значення
// '0' - це істинне значення бо це не пуста стрінга
// 1 - це істинне значення
// || = aбо-або - повертає перший істинний результат або ж останній хибний якщо всі хибні, тобто 0 || '0' (false || true) --> '0'
// && = i-i - повертає перший хибний результат або ж останній результат якщо хибних нема, тобто '0' && 1 (true && true) --> 1

var example_16 = (+null == false) < 1;
console.log("example_16: " + example_16);
// Результат: false
// Пояснення: +null --> перетворюємо null в число --> 0
//  пріорітетніша дія в дужках 
// == не строге порівняння, +null == false --> 0 == false --> 0 = 0 --> true
// щоб порявняти два значення true буде зведене до числа --> 1
// 1<1 --> false

var example_17 = false && true || true;
console.log("example_17: " + example_17);
// Результат: true
// Пояснення: false - є хибним значенням
// true - є істинним значенням
//  && = i-i - повертає перший хибний результат або ж останній результат якщо хибних нема, тобто false
// || = aбо-або - повертає перший істинний результат або ж останній хибний якщо всі хибні, тобто false || true --> true
// пріорітет логічних операторі
// && потім ||

var example_18 = false && (false || true);
console.log("example_18: " + example_18);
// Результат: false
// Пояснення: Пріорітетніша є дія в дужках
// false || true --> true
// false && true --> false

var example_19 = (+null == false) < 1 ** 5;
console.log("example_19: " + example_19);
// Результат: false
// Пояснення: Пріорітетніша є дія в дужках
// +null --> перетворюємо null в число --> 0
// == нестроге порівняння, +null == false --> 0 == false --> 0 = 0 --> true
// спочатку ступінь потім порівняння
// 1 ** 5 = 1
// для порівняння треба привести до одного типу значення, можемо true --> 1
// 1<1 --> false