{
	"info": {
		"_postman_id": "347e0eea-227d-41e8-9619-4ce4590710e4",
		"name": "Homework_18_xml",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17332328"
	},
	"item": [
		{
			"name": "Book ISBN Numbers Copy",
			"item": [
				{
					"name": "Is Valid ISBN13 Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//----1----",
									"pm.test(\"Check status code - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//----2----",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Status code not = 200! All next tests will not run. Fix the error! (>_<)\");",
									"    return;",
									"}",
									"//----3----",
									"pm.test(\"REQUEST: Header 'Content-Type' exist\", function () {",
									"    var contentType = pm.request.headers.get(\"Content-Type\");",
									"    pm.expect(contentType).to.not.be.undefined;",
									"});",
									"//----4----",
									"pm.test(\"REQUEST: Header 'Content-Type' including 'text/xml'\", function () {",
									"    var contentType = pm.request.headers.get(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"text/xml\");",
									"});",
									"//----5----",
									"pm.test(\"RESPONSE: Header 'Content-Type' exist\", function () {",
									"    var contentType = pm.response.headers.get(\"Content-Type\");",
									"    pm.expect(contentType).to.not.be.undefined;",
									"});",
									"//----6----",
									"pm.test(\"RESPONSE: Header 'Content-Type' including 'text/xml'\", function () {",
									"    var contentType = pm.response.headers.get(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"text/xml\");",
									"});",
									"",
									"",
									"//work with XML",
									"let xmlData = xml2Json(responseBody);",
									"// Ця дія перетворює XML-дані, які знаходяться у змінній responseBody, на JavaScript-об'єкт. **Читати внизу!",
									"//console.log(xmlData);",
									"",
									"let isbn = pm.iterationData.get(\"isbn\")",
									"",
									"//----7----",
									"pm.test(\"SOAP structure is valid\", function () {",
									"    pm.expect(xmlData).to.have.nested.property(\"soap:Envelope.soap:Body.m:IsValidISBN13Response\");",
									"    pm.expect(xmlData['soap:Envelope']['soap:Body']['m:IsValidISBN13Response']).to.have.property(\"m:IsValidISBN13Result\");",
									"});",
									"",
									"//----8----",
									"pm.test(\"The response starts with the correct XML declaration\", function () {",
									"    pm.expect(responseBody.startsWith('<?xml version=\"1.0\" encoding=\"utf-8\"?>')).to.be.true;",
									"});",
									"",
									"//----9----",
									"pm.test(\"The tag 'm:IsValidISBN13Response' is not empty\", function () {",
									"    let result = xmlData['soap:Envelope']['soap:Body']['m:IsValidISBN13Response'];",
									"    pm.expect(result).to.not.be.empty;",
									"});",
									"//-------------------------------------------",
									"let requestBody = pm.request.body.raw;",
									"// Регекс шукає вміст тегу <sISBN>...</sISBN>",
									"let isbnMatch = requestBody.match(/<sISBN>(.*?)<\\/sISBN>/);",
									"",
									"if (!isbnMatch) {",
									"    pm.test(\"ISBN not found in request body\", function () {",
									"        pm.expect.fail(\"Tag <sISBN> missing in the request body\");",
									"    });",
									"} else {",
									"    let sISBN = isbnMatch[1];",
									"    let digitsOnly = sISBN.replace(/-/g, \"\");",
									"",
									"    pm.test(\"ISBN in the request body contains only numbers and dashes\", function () {",
									"        pm.expect(digitsOnly).to.match(/^\\d+$/);",
									"    });",
									"",
									"    let responseBody = pm.response.text();",
									"    let xmlData = xml2Json(responseBody);",
									"",
									"    let result;",
									"    let mode = \"\";",
									"",
									"    try {",
									"        result = xmlData['soap:Envelope']['soap:Body']['m:IsValidISBN13Response']['m:IsValidISBN13Result'];",
									"        mode = \"ISBN13\";",
									"    } catch (err) {",
									"        try {",
									"            result = xmlData['soap:Envelope']['soap:Body']['m:IsValidISBN10Response']['m:IsValidISBN10Result'];",
									"            mode = \"ISBN10\";",
									"        } catch (err2) {",
									"            mode = 'unknown';",
									"        }",
									"    }",
									"",
									"    if (mode === \"ISBN13\") {",
									"        pm.test(\"ISBN13 in the request body has 13 digits (without dashes)\", function () {",
									"            pm.expect(digitsOnly).to.match(/^\\d{13}$/);",
									"        });",
									"    } else if (mode === \"ISBN10\") {",
									"        pm.test(\"ISBN10 in the request body has 10 digits (without dashes)\", function () {",
									"            pm.expect(digitsOnly).to.match(/^\\d{10}$/);",
									"        });",
									"    } else {",
									"        pm.test(\"ISBN type not recognized\", function () {",
									"            pm.expect.fail(\"Does not contain ISBN10 or ISBN13 tags\");",
									"        });",
									"    }",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"//cheerio",
									"",
									"",
									"const cheerio = require('cheerio'); //імпортуємо бібліотеку cheerio у змінну \"cheerio\"",
									"",
									"// cheerio is a library for parsing and manipulating HTML and XML documents in JavaScript. It is similar to jQuery, but it is designed to work with server-side JavaScript environments. It is often used in combination with other libraries, such as axios, to make HTTP requests and parse the responses.",
									"",
									"const $ = cheerio.load(responseBody, { xmlMode: true });",
									"",
									"// responseBody - містить XML-текст. І цей текст треба розібрати і перетворити на структуру, з якою нам буде зручно працювати.",
									"// { xmlMode: true } - це дуже важливий момент! Якщо ми не передамо - то cheerio буде думати що ми працюємо з HTML, а не з XML. І це буде призводити до помилок. Без xmlMode: true теги з : або великі літери можуть неправильно розпарситись.",
									"// const $ = ... Це скорочення: ми зберігаємо результат виклику в змінну $.",
									"// Тепер, наприклад, я можу просто писати ось так - $('m\\\\:IsValidISBN13Result').text(),  замість повного - cheerio.load(...).find(...)",
									"",
									"// Отож ці 2 рядки роблять наступне:",
									"// 1. повністю розпарсений XML-файл",
									"// 2. Можеш використовувати CSS-селектори, щоб знаходити елементи.",
									"// 3. Можеш витягати значення (.text()), перевіряти кількість (.length), ієрархію (>), тощо.",
									"",
									"",
									"//----CHEERIO #1----",
									"//Цим тестом ми перевіряємо, що відповідь містить коректну структуру SOAP. Ми шукаємо елемент soap:Envelope, який містить soap:Body, який містить m:IsValidISBN13Response. Якщо такий елемент знайдено, то тест пройде успішно.",
									"pm.test(\"CHEERIO #1 - SOAP structure is valid\", function () {",
									"    var response = $('soap\\\\:Envelope > soap\\\\:Body > m\\\\:IsValidISBN13Response');",
									"    pm.expect(response.length).to.be.above(0);",
									"});",
									"",
									"//----CHEERIO #2----",
									"//Цим тестом ми перевіряємо, що відповідь які міститься в елементі m:IsValidISBN13Result, є рядком і містить значення 'true' або 'false'. Якщо так, то тест пройде успішно.",
									"pm.test(\"CHEERIO #2 - The response is a string and contains a 'true' or 'false' value\", function () {",
									"    var result = $('m\\\\:IsValidISBN13Result').text();",
									"    pm.expect(result).to.be.a('string');",
									"    pm.expect(result === \"true\" || result === \"false\").to.be.true;",
									"});",
									"",
									"//----CHEERIO #3----",
									"//Цим иестом ми перевіряємо, що вузол 'IsValidISBN13Response' має лише один дочерній елемент. Якщо так, то тест пройде успішно.",
									"pm.test(\"CHEERIO #3 - The 'IsValidISBN13Response' has only one child element\", function () {",
									"    const childrenCount = $('m\\\\:IsValidISBN13Response').children().length;",
									"    pm.expect(childrenCount).to.eql(1);",
									"});",
									"",
									"//----CHEERIO #4----",
									"//",
									"pm.test(\"CHEERIO #4 - Check that xmlns:m is set correctly\", function () {",
									"    pm.expect(responseBody).to.include('xmlns:m=\"http://webservices.daehosting.com/ISBN\"');",
									"});",
									"",
									"",
									"",
									"                                //----XML2JSON----",
									"",
									"// //** - Postman вже пропонує використовувати вбудовану бібліотеки xml2js через require() замість застарілого способу. Отже тут все просто, вам необхідно використовувати require('xml2js') замість xml2Json. Це буде вигладати наступним чином:",
									"// const xml2js = require('xml2js'); //Це стандартний спосіб імпорту модуля xml2js у Postman",
									"// const parser = new xml2js.Parser({ explicitArray: false }); // Створюємо парсер. 'explicitArray: false'",
									"// parser.parseString(pm.response.text(), function (err, result) {",
									"//     if (err) {",
									"//         console.error(\"Помилка парсингу XML:\", err);",
									"//         pm.expect.fail(\"Помилка парсингу XML: \" + err.message);",
									"//     } else {",
									"//         let data = result; // Тепер 'data' містить перетворений JavaScript-об'єкт (JSON)",
									"",
									"//         // Приклад використання:",
									"//         pm.test(\"Статус відповіді 200 OK\", function () {",
									"//             pm.response.to.have.status(200);",
									"//         });",
									"",
									"//         // Припустимо, що в XML є елемент <status>OK</status>",
									"//         pm.test(\"Статус в XML відповіді OK\", function () {",
									"//             // Зверніть увагу, як ми тепер звертаємося до елементів",
									"//             // Залежить від структури вашого XML, але якщо кореневий елемент називається `response`,",
									"//             // а всередині нього є `status`:",
									"//             // pm.expect(data.response.status).to.eql(\"OK\");",
									"",
									"//             // Якщо ваш XML виглядає як у попередньому прикладі з <bookstore>:",
									"//             pm.expect(data.bookstore.book.title['#text']).to.eql(\"Everyday Italian\");",
									"//             pm.expect(data.bookstore.book['@attributes'].category).to.eql(\"cooking\");",
									"//         });",
									"",
									"//         console.log(\"Парсинг XML успішний. Дані:\", data);",
									"//     }",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <IsValidISBN13 xmlns=\"http://webservices.daehosting.com/ISBN\">\n      <sISBN>{{isbn}}</sISBN>\n    </IsValidISBN13>\n  </soap:Body>\n</soap:Envelope>\n\n\n<!-- 978-1-4612-9090-2 -->"
						},
						"url": {
							"raw": "http://webservices.daehosting.com/services/isbnservice.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"daehosting",
								"com"
							],
							"path": [
								"services",
								"isbnservice.wso"
							]
						},
						"description": "The test is done by calculation on the first 12 digits and compare the result with the checksum number at the end. You have to pass a 13 digits number."
					},
					"response": []
				},
				{
					"name": "Is Valid ISBN10 Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//----1----",
									"pm.test(\"Check status code - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//----2----",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Status code not = 200! All next tests will not run. Fix the error! (>_<)\");",
									"    return;",
									"}",
									"//----3----",
									"pm.test(\"REQUEST: Header 'Content-Type' exist\", function () {",
									"    var contentType = pm.request.headers.get(\"Content-Type\");",
									"    pm.expect(contentType).to.not.be.undefined;",
									"});",
									"//----4----",
									"pm.test(\"REQUEST: Header 'Content-Type' including 'text/xml'\", function () {",
									"    var contentType = pm.request.headers.get(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"text/xml\");",
									"});",
									"//----5----",
									"pm.test(\"RESPONSE: Header 'Content-Type' exist\", function () {",
									"    var contentType = pm.response.headers.get(\"Content-Type\");",
									"    pm.expect(contentType).to.not.be.undefined;",
									"});",
									"//----6----",
									"pm.test(\"RESPONSE: Header 'Content-Type' including 'text/xml'\", function () {",
									"    var contentType = pm.response.headers.get(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"text/xml\");",
									"});",
									"",
									"",
									"//work with XML",
									"let xmlData = xml2Json(responseBody);",
									"// Ця дія перетворює XML-дані, які знаходяться у змінній responseBody, на JavaScript-об'єкт. **Читати внизу!",
									"//console.log(xmlData);",
									"",
									"let isbn = pm.iterationData.get(\"isbn\")",
									"",
									"//----7----",
									"pm.test(\"SOAP structure is valid\", function () {",
									"    pm.expect(xmlData).to.have.nested.property(\"soap:Envelope.soap:Body.m:IsValidISBN10Response\");",
									"    pm.expect(xmlData['soap:Envelope']['soap:Body']['m:IsValidISBN10Response']).to.have.property(\"m:IsValidISBN10Result\");",
									"});",
									"",
									"//----8----",
									"pm.test(\"The response starts with the correct XML declaration\", function () {",
									"    pm.expect(responseBody.startsWith('<?xml version=\"1.0\" encoding=\"utf-8\"?>')).to.be.true;",
									"});",
									"",
									"//----9----",
									"pm.test(\"The tag 'm:IsValidISBN10Response' is not empty\", function () {",
									"    let result = xmlData['soap:Envelope']['soap:Body']['m:IsValidISBN10Response'];",
									"    pm.expect(result).to.not.be.empty;",
									"});",
									"//-------------------------------------------",
									"let requestBody = pm.request.body.raw;",
									"// Регекс шукає вміст тегу <sISBN>...</sISBN>",
									"let isbnMatch = requestBody.match(/<sISBN>(.*?)<\\/sISBN>/);",
									"",
									"if (!isbnMatch) {",
									"    pm.test(\"ISBN not found in request body\", function () {",
									"        pm.expect.fail(\"Tag <sISBN> missing in the request body\");",
									"    });",
									"} else {",
									"    let sISBN = isbnMatch[1];",
									"    let digitsOnly = sISBN.replace(/-/g, \"\");",
									"",
									"    pm.test(\"ISBN in the request body contains only numbers and dashes\", function () {",
									"        pm.expect(digitsOnly).to.match(/^\\d+$/);",
									"    });",
									"",
									"    let responseBody = pm.response.text();",
									"    let xmlData = xml2Json(responseBody);",
									"",
									"    let result;",
									"    let mode = \"\";",
									"",
									"    try {",
									"        result = xmlData['soap:Envelope']['soap:Body']['m:IsValidISBN13Response']['m:IsValidISBN13Result'];",
									"        mode = \"ISBN13\";",
									"    } catch (err) {",
									"        try {",
									"            result = xmlData['soap:Envelope']['soap:Body']['m:IsValidISBN10Response']['m:IsValidISBN10Result'];",
									"            mode = \"ISBN10\";",
									"        } catch (err2) {",
									"            mode = 'unknown';",
									"        }",
									"    }",
									"",
									"    if (mode === \"ISBN13\") {",
									"        pm.test(\"ISBN13 in the request body has 13 digits (without dashes)\", function () {",
									"            pm.expect(digitsOnly).to.match(/^\\d{13}$/);",
									"        });",
									"    } else if (mode === \"ISBN10\") {",
									"        pm.test(\"ISBN10 in the request body has 10 digits (without dashes)\", function () {",
									"            pm.expect(digitsOnly).to.match(/^\\d{10}$/);",
									"        });",
									"    } else {",
									"        pm.test(\"ISBN type not recognized\", function () {",
									"            pm.expect.fail(\"Does not contain ISBN10 or ISBN13 tags\");",
									"        });",
									"    }",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"//cheerio",
									"",
									"",
									"const cheerio = require('cheerio'); //імпортуємо бібліотеку cheerio у змінну \"cheerio\"",
									"",
									"// cheerio is a library for parsing and manipulating HTML and XML documents in JavaScript. It is similar to jQuery, but it is designed to work with server-side JavaScript environments. It is often used in combination with other libraries, such as axios, to make HTTP requests and parse the responses.",
									"",
									"const $ = cheerio.load(responseBody, { xmlMode: true });",
									"",
									"// responseBody - містить XML-текст. І цей текст треба розібрати і перетворити на структуру, з якою нам буде зручно працювати.",
									"// { xmlMode: true } - це дуже важливий момент! Якщо ми не передамо - то cheerio буде думати що ми працюємо з HTML, а не з XML. І це буде призводити до помилок. Без xmlMode: true теги з : або великі літери можуть неправильно розпарситись.",
									"// const $ = ... Це скорочення: ми зберігаємо результат виклику в змінну $.",
									"// Тепер, наприклад, я можу просто писати ось так - $('m\\\\:IsValidISBN13Result').text(),  замість повного - cheerio.load(...).find(...)",
									"",
									"// Отож ці 2 рядки роблять наступне:",
									"// 1. повністю розпарсений XML-файл",
									"// 2. Можеш використовувати CSS-селектори, щоб знаходити елементи.",
									"// 3. Можеш витягати значення (.text()), перевіряти кількість (.length), ієрархію (>), тощо.",
									"",
									"",
									"//----CHEERIO #1----",
									"//Цим тестом ми перевіряємо, що відповідь містить коректну структуру SOAP. Ми шукаємо елемент soap:Envelope, який містить soap:Body, який містить m:IsValidISBN13Response. Якщо такий елемент знайдено, то тест пройде успішно.",
									"pm.test(\"CHEERIO #1 - SOAP structure is valid\", function () {",
									"    var response = $('soap\\\\:Envelope > soap\\\\:Body > m\\\\:IsValidISBN10Response');",
									"    pm.expect(response.length).to.be.above(0);",
									"});",
									"",
									"//----CHEERIO #2----",
									"//Цим тестом ми перевіряємо, що відповідь які міститься в елементі m:IsValidISBN13Result, є рядком і містить значення 'true' або 'false'. Якщо так, то тест пройде успішно.",
									"pm.test(\"CHEERIO #2 - The response is a string and contains a 'true' or 'false' value\", function () {",
									"    var result = $('m\\\\:IsValidISBN10Result').text();",
									"    pm.expect(result).to.be.a('string');",
									"    pm.expect(result === \"true\" || result === \"false\").to.be.true;",
									"});",
									"",
									"//----CHEERIO #3----",
									"//Цим иестом ми перевіряємо, що вузол 'IsValidISBN13Response' має лише один дочерній елемент. Якщо так, то тест пройде успішно.",
									"pm.test(\"CHEERIO #3 - The 'IsValidISBN10Response' has only one child element\", function () {",
									"    const childrenCount = $('m\\\\:IsValidISBN10Response').children().length;",
									"    pm.expect(childrenCount).to.eql(1);",
									"});",
									"",
									"//----CHEERIO #4----",
									"//",
									"pm.test(\"CHEERIO #4 - Check that xmlns:m is set correctly\", function () {",
									"    pm.expect(responseBody).to.include('xmlns:m=\"http://webservices.daehosting.com/ISBN\"');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <IsValidISBN10 xmlns=\"http://webservices.daehosting.com/ISBN\">\n      <sISBN>{{isbn}}</sISBN>\n    </IsValidISBN10>\n  </soap:Body>\n</soap:Envelope>\n\n<!-- 0-19-852663-6 -->"
						},
						"url": {
							"raw": "http://webservices.daehosting.com/services/isbnservice.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"daehosting",
								"com"
							],
							"path": [
								"services",
								"isbnservice.wso"
							]
						},
						"description": "The test is done by calculation on the first 9 digits and compare the result with the checksum number at the end. You have to pass a 10 digits number or 8 digits and an X."
					},
					"response": []
				}
			],
			"description": "SOAP APIs for book ISBN numbers.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}